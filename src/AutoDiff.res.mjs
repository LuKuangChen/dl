// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utilities from "./Utilities.res.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function MakeTerm(Nat) {
  var nVariable = Nat.n;
  var makeEnv = function (m) {
    return Utilities.buildArray(nVariable, (function (param) {
                  return m();
                }));
  };
  var claimed = {
    contents: 0
  };
  var claim = function () {
    var i = claimed.contents;
    if (i < nVariable) {
      claimed.contents = claimed.contents + 1 | 0;
      return {
              TAG: "Var",
              _0: i
            };
    } else {
      return PervasivesU.failwith("Not enough variables");
    }
  };
  var claimMany = function (n) {
    if (n === 0) {
      return [];
    } else {
      return Belt_Array.concatMany([
                  [claim()],
                  claimMany(n - 1 | 0)
                ]);
    }
  };
  var $$eval = function (term, env) {
    if (term.TAG !== "Var") {
      return term._0(env);
    }
    var i = term._0;
    var d = Core__Array.make(nVariable, 0.0);
    return {
            output: Core__Option.getExn(env[i], undefined),
            derivative: (d[i] = 1.0, d)
          };
  };
  var checkEq = function (test, m1, m2) {
    var checkCloseEnough = function (x, y, s) {
      if (!Utilities.closeEnough(x, y)) {
        console.log("fail check:", s);
        console.log("- received:", x);
        console.log("- expected:", y);
        return ;
      }
      
    };
    checkCloseEnough(m1.output, m2.output, test + "-output");
    Utilities.map2(m1.derivative, m2.derivative, (function (d1, d2) {
            checkCloseEnough(d1, d2, test + "-derivative");
          }));
  };
  var spy = function (x, name) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                console.log(name + " =", x$1.output);
                return x$1;
              })
          };
  };
  var c = function (v) {
    return {
            TAG: "Term",
            _0: (function (_env) {
                return {
                        output: v,
                        derivative: Core__Array.make(nVariable, 0.0)
                      };
              })
          };
  };
  var $plus = function (x, y) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                var y$1 = $$eval(y, env);
                return {
                        output: x$1.output + y$1.output,
                        derivative: Utilities.vadd(x$1.derivative, y$1.derivative)
                      };
              })
          };
  };
  var $star = function (x, y) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                var y$1 = $$eval(y, env);
                return {
                        output: x$1.output * y$1.output,
                        derivative: Utilities.vadd(Utilities.emul(x$1.derivative, y$1.output), Utilities.emul(y$1.derivative, x$1.output))
                      };
              })
          };
  };
  var pow = function (x, n) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                return {
                        output: Math.pow(x$1.output, n),
                        derivative: Utilities.emul(x$1.derivative, n * Math.pow(x$1.output, n - 1.0))
                      };
              })
          };
  };
  var exp = function (x) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                return {
                        output: Math.exp(x$1.output),
                        derivative: Utilities.emul(x$1.derivative, Math.exp(x$1.output))
                      };
              })
          };
  };
  var log = function (x) {
    return {
            TAG: "Term",
            _0: (function (env) {
                var x$1 = $$eval(x, env);
                return {
                        output: Math.log(x$1.output),
                        derivative: Utilities.emul(x$1.derivative, 1.0 / x$1.output)
                      };
              })
          };
  };
  var ifte = function (b, x, y) {
    return {
            TAG: "Term",
            _0: (function (env) {
                if (b(env)) {
                  return $$eval(x, env);
                } else {
                  return $$eval(y, env);
                }
              })
          };
  };
  var $pipe$pipe = function (a, b) {
    return function (env) {
      if (a(env)) {
        return true;
      } else {
        return b(env);
      }
    };
  };
  var $amp$amp = function (a, b) {
    return function (env) {
      if (a(env)) {
        return b(env);
      } else {
        return false;
      }
    };
  };
  var not = function (a) {
    return function (env) {
      return !a(env);
    };
  };
  var $eq = function (x, y) {
    return function (env) {
      var x$1 = $$eval(x, env);
      var y$1 = $$eval(y, env);
      return x$1.output === y$1.output;
    };
  };
  var $less = function (x, y) {
    return function (env) {
      var x$1 = $$eval(x, env);
      var y$1 = $$eval(y, env);
      return x$1.output < y$1.output;
    };
  };
  return {
          makeEnv: makeEnv,
          spy: spy,
          $$eval: $$eval,
          claim: claim,
          claimMany: claimMany,
          c: c,
          $plus: $plus,
          $star: $star,
          $less: $less,
          $eq: $eq,
          not: not,
          $amp$amp: $amp$amp,
          $pipe$pipe: $pipe$pipe,
          pow: pow,
          exp: exp,
          log: log,
          ifte: ifte,
          checkEq: checkEq
        };
}

function ExtraOperators(Term) {
  var $tilde$neg = function (x) {
    return Term.$star(Term.c(-1.0), x);
  };
  var $neg = function (x, y) {
    return Term.$plus(x, $tilde$neg(y));
  };
  var $slash = function (x, y) {
    return Term.$star(x, Term.pow(y, -1.0));
  };
  var $great = function (x, y) {
    return Term.$less(y, x);
  };
  var $less$eq = function (x, y) {
    return Term.$pipe$pipe(Term.$less(x, y), Term.$eq(x, y));
  };
  var $great$eq = function (x, y) {
    return Term.$pipe$pipe(Term.$less(y, x), Term.$eq(x, y));
  };
  var $bang$eq = function (x, y) {
    return Term.not(Term.$eq(x, y));
  };
  var sigmoid = function (x) {
    return $slash(Term.c(1.0), Term.$plus(Term.c(1.0), Term.exp($tilde$neg(x))));
  };
  var reLU = function (x) {
    var y = Term.c(0.0);
    return Term.ifte(Term.$less(y, x), x, Term.c(0.0));
  };
  var leakyReLU = function (x) {
    var y = Term.c(0.0);
    return Term.ifte(Term.$less(y, x), x, Term.$star(Term.c(0.1), x));
  };
  var dotproduct = function (v1, v2) {
    return Core__Array.reduce(Utilities.map2(v1, v2, Term.$star), Term.c(0.0), Term.$plus);
  };
  return {
          $tilde$neg: $tilde$neg,
          $neg: $neg,
          $slash: $slash,
          $great: $great,
          $less$eq: $less$eq,
          $great$eq: $great$eq,
          $bang$eq: $bang$eq,
          sigmoid: sigmoid,
          reLU: reLU,
          leakyReLU: leakyReLU,
          dotproduct: dotproduct
        };
}

var claimed = {
  contents: 0
};

function claim() {
  var i = claimed.contents;
  if (i < 2) {
    claimed.contents = claimed.contents + 1 | 0;
    return {
            TAG: "Var",
            _0: i
          };
  } else {
    return PervasivesU.failwith("Not enough variables");
  }
}

function $$eval(term, env) {
  if (term.TAG !== "Var") {
    return term._0(env);
  }
  var i = term._0;
  var d = Core__Array.make(2, 0.0);
  return {
          output: Core__Option.getExn(env[i], undefined),
          derivative: (d[i] = 1.0, d)
        };
}

function checkEq(test, m1, m2) {
  var checkCloseEnough = function (x, y, s) {
    if (!Utilities.closeEnough(x, y)) {
      console.log("fail check:", s);
      console.log("- received:", x);
      console.log("- expected:", y);
      return ;
    }
    
  };
  checkCloseEnough(m1.output, m2.output, test + "-output");
  Utilities.map2(m1.derivative, m2.derivative, (function (d1, d2) {
          checkCloseEnough(d1, d2, test + "-derivative");
        }));
}

function $plus(x, y) {
  return {
          TAG: "Term",
          _0: (function (env) {
              var x$1 = $$eval(x, env);
              var y$1 = $$eval(y, env);
              return {
                      output: x$1.output + y$1.output,
                      derivative: Utilities.vadd(x$1.derivative, y$1.derivative)
                    };
            })
        };
}

function $star(x, y) {
  return {
          TAG: "Term",
          _0: (function (env) {
              var x$1 = $$eval(x, env);
              var y$1 = $$eval(y, env);
              return {
                      output: x$1.output * y$1.output,
                      derivative: Utilities.vadd(Utilities.emul(x$1.derivative, y$1.output), Utilities.emul(y$1.derivative, x$1.output))
                    };
            })
        };
}

function pow(x, n) {
  return {
          TAG: "Term",
          _0: (function (env) {
              var x$1 = $$eval(x, env);
              return {
                      output: Math.pow(x$1.output, n),
                      derivative: Utilities.emul(x$1.derivative, n * Math.pow(x$1.output, n - 1.0))
                    };
            })
        };
}

function exp(x) {
  return {
          TAG: "Term",
          _0: (function (env) {
              var x$1 = $$eval(x, env);
              return {
                      output: Math.exp(x$1.output),
                      derivative: Utilities.emul(x$1.derivative, Math.exp(x$1.output))
                    };
            })
        };
}

function log(x) {
  return {
          TAG: "Term",
          _0: (function (env) {
              var x$1 = $$eval(x, env);
              return {
                      output: Math.log(x$1.output),
                      derivative: Utilities.emul(x$1.derivative, 1.0 / x$1.output)
                    };
            })
        };
}

function $tilde$neg(x) {
  return $star({
              TAG: "Term",
              _0: (function (_env) {
                  return {
                          output: -1.0,
                          derivative: Core__Array.make(2, 0.0)
                        };
                })
            }, x);
}

function $neg(x, y) {
  return $plus(x, $tilde$neg(y));
}

function $slash(x, y) {
  return $star(x, pow(y, -1.0));
}

function dotproduct(v1, v2) {
  return Core__Array.reduce(Utilities.map2(v1, v2, $star), {
              TAG: "Term",
              _0: (function (_env) {
                  return {
                          output: 0.0,
                          derivative: Core__Array.make(2, 0.0)
                        };
                })
            }, $plus);
}

var x = claim();

var y = claim();

var result = $$eval(x, [
      3.0,
      5.0
    ]);

checkEq("refx", result, {
      output: 3.0,
      derivative: [
        1.0,
        0.0
      ]
    });

var result$1 = $$eval(y, [
      3.0,
      5.0
    ]);

checkEq("refy", result$1, {
      output: 5.0,
      derivative: [
        0.0,
        1.0
      ]
    });

var result$2 = $$eval($plus(x, y), [
      3.0,
      5.0
    ]);

checkEq("add", result$2, {
      output: 8.0,
      derivative: [
        1.0,
        1.0
      ]
    });

var result$3 = $$eval($neg(x, y), [
      3.0,
      5.0
    ]);

checkEq("sub", result$3, {
      output: -2.0,
      derivative: [
        1.0,
        -1.0
      ]
    });

var result$4 = $$eval($tilde$neg(y), [
      3.0,
      5.0
    ]);

checkEq("neg", result$4, {
      output: -5.0,
      derivative: [
        0.0,
        -1.0
      ]
    });

var result$5 = $$eval($star(x, y), [
      3.0,
      5.0
    ]);

checkEq("mul", result$5, {
      output: 15.0,
      derivative: [
        5.0,
        3.0
      ]
    });

var result$6 = $$eval($slash(x, y), [
      3.0,
      5.0
    ]);

checkEq("div", result$6, {
      output: 0.6000000000000001,
      derivative: [
        0.2,
        -3.0 / 25.0
      ]
    });

var result$7 = $$eval(pow(x, 5.0), [
      Math.E,
      5.0
    ]);

checkEq("pow", result$7, {
      output: Math.exp(5.0),
      derivative: [
        5.0 * Math.exp(4.0),
        0.0
      ]
    });

var z = exp(x);

var result$8 = $$eval(z, [
      3.0,
      5.0
    ]);

checkEq("exp", result$8, {
      output: Math.exp(3.0),
      derivative: [
        Math.exp(3.0),
        0.0
      ]
    });

var z$1 = log(x);

var result$9 = $$eval(z$1, [
      3.0,
      5.0
    ]);

checkEq("log", result$9, {
      output: Math.log(3.0),
      derivative: [
        1.0 / 3.0,
        0.0
      ]
    });

var z$2 = dotproduct([
      {
        TAG: "Term",
        _0: (function (_env) {
            return {
                    output: 1.0,
                    derivative: Core__Array.make(2, 0.0)
                  };
          })
      },
      x,
      y
    ], [
      {
        TAG: "Term",
        _0: (function (_env) {
            return {
                    output: 1.0,
                    derivative: Core__Array.make(2, 0.0)
                  };
          })
      },
      {
        TAG: "Term",
        _0: (function (_env) {
            return {
                    output: 2.0,
                    derivative: Core__Array.make(2, 0.0)
                  };
          })
      },
      {
        TAG: "Term",
        _0: (function (_env) {
            return {
                    output: 4.0,
                    derivative: Core__Array.make(2, 0.0)
                  };
          })
      }
    ]);

var result$10 = $$eval(z$2, [
      3.0,
      5.0
    ]);

checkEq("dotproduct", result$10, {
      output: 27.0,
      derivative: [
        2.0,
        4.0
      ]
    });

export {
  MakeTerm ,
  ExtraOperators ,
}
/* x Not a pure module */
