// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";

function map2(f, ns, ms) {
  if (ns.length !== ms.length) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "Utilities.res",
            2,
            2
          ],
          Error: new Error()
        };
  }
  return ns.map(function (n, i) {
              var m = Core__Option.getExn(ms[i], undefined);
              return f(n, m);
            });
}

function dotproduct(v1, v2) {
  return Core__Array.reduce(map2((function (prim0, prim1) {
                    return prim0 * prim1;
                  }), v1, v2), 0.0, (function (prim0, prim1) {
                return prim0 + prim1;
              }));
}

function buildArray(length, f) {
  return Core__Array.make(length, 0).map(function (param, i) {
              return f(i);
            });
}

function sigmoid(x) {
  return 1.0 / (1.0 + Math.exp(- x));
}

function d_sigmoid(x) {
  return sigmoid(x) * (1.0 - sigmoid(x));
}

function sum(ns) {
  return Core__Array.reduce(ns, 0, (function (a, b) {
                return a + b;
              }));
}

function nonnegative(i) {
  return 0 <= i;
}

function bound(n) {
  if (n === Number.NEGATIVE_INFINITY) {
    return - Number.MAX_VALUE;
  } else if (n === Number.POSITIVE_INFINITY) {
    return Number.MAX_VALUE;
  } else {
    return n;
  }
}

function jitter(n) {
  if (Math.random() >= 0.5) {
    return n - Number.EPSILON;
  } else {
    return n + Number.EPSILON;
  }
}

export {
  map2 ,
  dotproduct ,
  buildArray ,
  sigmoid ,
  d_sigmoid ,
  sum ,
  nonnegative ,
  bound ,
  jitter ,
}
/* No side effect */
