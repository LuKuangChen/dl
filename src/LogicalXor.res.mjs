// Generated by ReScript, PLEASE EDIT WITH CARE

import * as AutoDiff from "./AutoDiff.res.mjs";
import * as Utilities from "./Utilities.res.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.res.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";

var dataset = [
  {
    input: [
      true,
      true
    ],
    output: false
  },
  {
    input: [
      true,
      false
    ],
    output: true
  },
  {
    input: [
      false,
      true
    ],
    output: true
  },
  {
    input: [
      false,
      false
    ],
    output: false
  }
];

function inject(b) {
  if (b) {
    return 1.0;
  } else {
    return 0.0;
  }
}

function project(i) {
  if (i === 0.0) {
    return false;
  } else if (i === 1.0) {
    return true;
  } else {
    return PervasivesU.failwith("bad input");
  }
}

var MyTerm = AutoDiff.MakeTerm({});

var MyExtraOps = AutoDiff.ExtraOperators(MyTerm);

function loss(dataset) {
  var w11 = MyTerm.claimMany(3, undefined);
  var w12 = MyTerm.claimMany(3, undefined);
  var w13 = MyTerm.claimMany(3, undefined);
  var w14 = MyTerm.claimMany(3, undefined);
  var w15 = MyTerm.claimMany(3, undefined);
  var w2 = MyTerm.claimMany(6, undefined);
  return Core__Array.reduce(dataset.map(function (datum) {
                  var input = datum.input;
                  var x = MyTerm.c(input[0] ? 1.0 : 0.0);
                  var y = MyTerm.c(input[1] ? 1.0 : 0.0);
                  var h11 = MyExtraOps.reELU(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            x,
                            y
                          ], w11));
                  var h12 = MyExtraOps.reELU(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            x,
                            y
                          ], w12));
                  var h13 = MyExtraOps.reELU(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            x,
                            y
                          ], w13));
                  var h14 = MyExtraOps.reELU(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            x,
                            y
                          ], w14));
                  var h15 = MyExtraOps.reELU(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            x,
                            y
                          ], w15));
                  var h2 = MyExtraOps.sigmoid(MyExtraOps.dotproduct([
                            MyTerm.c(1.0),
                            h11,
                            h12,
                            h13,
                            h14,
                            h15
                          ], w2));
                  return MyExtraOps.$tilde$neg(MyTerm.log(datum.output ? h2 : MyExtraOps.$neg(MyTerm.c(1.0), h2)));
                }), MyTerm.c(0.0), MyTerm.$plus);
}

function learn(iteration, dataset) {
  if (iteration < 0) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "LogicalXor.res",
            77,
            2
          ],
          Error: new Error()
        };
  }
  var loss$1 = loss(dataset);
  var n = iteration;
  var shouldBreak = false;
  var currParameter = MyTerm.makeEnv(function (param) {
        return Math.random() * 2.0 - 0.5;
      });
  while(n >= 0 && !shouldBreak) {
    n = n - 1 | 0;
    var result = MyTerm.$$eval(loss$1, currParameter);
    var nextParameter = Utilities.map2(currParameter, result.derivative, (function (p, dp) {
            return p - dp * 1.0;
          }));
    if (Utilities.dotproduct(result.derivative, result.derivative) < Number.EPSILON) {
      shouldBreak = true;
    } else {
      currParameter = nextParameter;
    }
  };
}

learn(100, dataset);

var alpha = 1.0;

export {
  alpha ,
  dataset ,
  inject ,
  project ,
  MyTerm ,
  MyExtraOps ,
  loss ,
  learn ,
}
/* MyTerm Not a pure module */
